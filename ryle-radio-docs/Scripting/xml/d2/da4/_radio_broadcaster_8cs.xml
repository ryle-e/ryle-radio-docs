<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="d2/da4/_radio_broadcaster_8cs" kind="file" language="C#">
    <compoundname>RadioBroadcaster.cs</compoundname>
    <innerclass refid="db/de5/class_ryle_radio_1_1_components_1_1_radio_broadcaster" prot="public">RyleRadio::Components::RadioBroadcaster</innerclass>
    <innernamespace refid="da/d5f/namespace_ryle_radio">RyleRadio</innernamespace>
    <innernamespace refid="da/d43/namespace_ryle_radio_1_1_components">RyleRadio::Components</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using<sp/></highlight><highlight class="normal">NaughtyAttributes;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="db/d1f/namespace_ryle_radio_1_1_components_1_1_base" kindref="compound">RyleRadio.Components.Base</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="d0/d28/namespace_ryle_radio_1_1_tracks" kindref="compound">RyleRadio.Tracks</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UnityEngine;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="da/d43/namespace_ryle_radio_1_1_components" kindref="compound">RyleRadio.Components</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>broadcaster<sp/>for<sp/>a<sp/>RadioTrack-<sp/>the<sp/>closer<sp/>the<sp/>output<sp/>is,<sp/>the<sp/>louder<sp/>the<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>has<sp/>a<sp/>custom<sp/>inspector<sp/>in<sp/>RadioBroadcasterEditor.cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>[AddComponentMenu(</highlight><highlight class="stringliteral">&quot;Ryle<sp/>Radio/Radio<sp/>Broadcaster&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="12" refid="db/de5/class_ryle_radio_1_1_components_1_1_radio_broadcaster" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="db/de5/class_ryle_radio_1_1_components_1_1_radio_broadcaster" kindref="compound">RadioBroadcaster</ref><sp/>:<sp/><ref refid="d1/d88/class_ryle_radio_1_1_components_1_1_base_1_1_radio_component_data_accessor" kindref="compound">RadioComponentDataAccessor</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>inner<sp/>and<sp/>outer<sp/>radii<sp/>of<sp/>this<sp/>broadcaster-<sp/>if<sp/>the<sp/>output<sp/>is<sp/>in<sp/>the<sp/>inner<sp/>radius,<sp/>the<sp/>broadcast<sp/>radiusProg<sp/>is<sp/>1.<sp/>if<sp/>it&apos;s<sp/>between<sp/>the<sp/>inner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>outer<sp/>radii,<sp/>the<sp/>radiusProg<sp/>is<sp/>between<sp/>0<sp/>and<sp/>1.<sp/>if<sp/>it&apos;s<sp/>outside<sp/>both,<sp/>the<sp/>radiusProg<sp/>is<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Space(8)]</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Vector2<sp/>broadcastRadius;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>min<sp/>and<sp/>max<sp/>broadcast<sp/>power<sp/>of<sp/>this<sp/>broadcaster-<sp/>the<sp/>first<sp/>value<sp/>is<sp/>the<sp/>power<sp/>right<sp/>on<sp/>the<sp/>outer<sp/>edge<sp/>of<sp/>the<sp/>broadcaster,<sp/>and<sp/>the<sp/>second<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>power<sp/>in<sp/>the<sp/>inner<sp/>radius.<sp/>if<sp/>the<sp/>outer<sp/>power<sp/>is<sp/>&gt;<sp/>0,<sp/>you<sp/>can<sp/>make<sp/>it<sp/>global<sp/>in<sp/>applyToAllOutputsOutside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[Space(8),<sp/>MinMaxSlider(0,<sp/>1),<sp/>SerializeField]</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/>Vector2<sp/>broadcastPowers<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(0,<sp/>1);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>falloff<sp/>between<sp/>the<sp/>inner<sp/>and<sp/>outer<sp/>broadcast<sp/>ranges-<sp/>you<sp/>probably<sp/>don&apos;t<sp/>need<sp/>to<sp/>touch<sp/>this<sp/>but<sp/>it&apos;s<sp/>here<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField,<sp/>CurveRange(0,<sp/>0,<sp/>1,<sp/>1)]</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/>AnimationCurve<sp/>distanceFalloff<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Keyframe[2]<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(0,<sp/>1,<sp/>0,<sp/>0),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(1,<sp/>0,<sp/>0,<sp/>0)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>min<sp/>broadcast<sp/>power<sp/>is<sp/>&gt;<sp/>0,<sp/>it<sp/>means<sp/>that<sp/>the<sp/>broacast<sp/>doesn&apos;t<sp/>entirely<sp/>stop<sp/>once<sp/>it<sp/>hits<sp/>the<sp/>edge-<sp/>this<sp/>means<sp/>we<sp/>could<sp/>make<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>when<sp/>outside<sp/>the<sp/>broadcast<sp/>radius.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[SerializeField,<sp/>AllowNesting,<sp/>ShowIf(</highlight><highlight class="stringliteral">&quot;ShowApplyToAllOutputs&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>applyToAllOutputsOutside<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>position<sp/>of<sp/>the<sp/>broadcaster<sp/>at<sp/>the<sp/>last<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>cache<sp/>this<sp/>as<sp/>we<sp/>cannot<sp/>use<sp/>transform.position<sp/>in<sp/>GetPower,<sp/>as<sp/>audio<sp/>is<sp/>on<sp/>a<sp/>different<sp/>thread<sp/>and<sp/>we<sp/>would<sp/>otherwise<sp/>get<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>Vector3<sp/>cachedPos;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShowApplyToAllOutputs<sp/>=&gt;<sp/>broadcastPowers.x<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Update()</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cache<sp/>the<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cachedPos<sp/>=<sp/>transform.position;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link<sp/>and<sp/>unlink<sp/>this<sp/>broadcaster<sp/>to<sp/>a<sp/>track</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssignToTrack(<ref refid="d2/db4/class_ryle_radio_1_1_tracks_1_1_radio_track_wrapper" kindref="compound">RadioTrackWrapper</ref><sp/>_track)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_track.broadcasters.Add(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_track.OnAddBroadcaster(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>_track);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveFromTrack(<ref refid="d2/db4/class_ryle_radio_1_1_tracks_1_1_radio_track_wrapper" kindref="compound">RadioTrackWrapper</ref><sp/>_track)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_track.broadcasters.Remove(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_track.OnRemoveBroadcaster(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>_track);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>radiusProg<sp/>of<sp/>the<sp/>output<sp/>at<sp/>a<sp/>certain<sp/>position<sp/>relative<sp/>to<sp/>this<sp/>broadcaster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>i.e<sp/>a<sp/>value<sp/>from<sp/>0-1<sp/>for<sp/>how<sp/>close<sp/>the<sp/>output<sp/>is<sp/>to<sp/>this<sp/>broadcaster,<sp/>that<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>multiplier<sp/>to<sp/>the<sp/>audio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GetPower(Vector3<sp/>_receiverPos)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>distance<sp/>between<sp/>the<sp/>output<sp/>and<sp/>this<sp/>broadcaster</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>Vector3.Distance(cachedPos,<sp/>_receiverPos);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>far<sp/>between<sp/>the<sp/>inner<sp/>and<sp/>outer<sp/>radii<sp/>the<sp/>distance<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radiusProg<sp/>=<sp/>Mathf.Clamp01(Mathf.InverseLerp(broadcastRadius.x,<sp/>broadcastRadius.y,<sp/>distance));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>adjusted<sp/>power<sp/>according<sp/>to<sp/>the<sp/>distance<sp/>falloff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>adjustedT<sp/>=<sp/>distanceFalloff.Evaluate(radiusProg);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>output<sp/>is<sp/>outside<sp/>of<sp/>the<sp/>range<sp/>of<sp/>this<sp/>broadcaster<sp/>and<sp/>it&apos;s<sp/>not<sp/>global<sp/>when<sp/>outside,<sp/>return<sp/>a<sp/>power<sp/>of<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adjustedT<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>(ShowApplyToAllOutputs<sp/>&amp;&amp;<sp/>!applyToAllOutputsOutside))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>the<sp/>actual<sp/>broadcast<sp/>power<sp/>according<sp/>to<sp/>values<sp/>supplied<sp/>in<sp/>the<sp/>broadcastPowers<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mathf.Lerp(broadcastPowers.x,<sp/>broadcastPowers.y,<sp/>adjustedT);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="D:/GitHub/ryle-radio/Assets/RyleRadio/Scripts/Runtime/Components/RadioBroadcaster.cs"/>
  </compounddef>
</doxygen>
